$table-bg: #2c7a51;
$table-border: #1b4b31;
$card-bg: #ffffff;
$card-border: #e0e0e0;
$name-bg: rgba(0, 0, 0, 0.7);
$current-player: #2196f3;
$empty-spot: rgba(0, 0, 0, 0.3);

.overall-container {
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    padding: 2rem;
    position: relative;
}

.poker-table-container {
  height: 100%;
  display: flex;
  flex-direction: column;
  padding: 1.5rem;
  overflow: visible;
  min-height: 0;
}

.controls {
  position: relative;
  z-index: 2;
  flex-shrink: 0;
  padding: 0.25rem;
  text-align: center;
  margin-bottom: 0.25rem;
  background-color: rgba(255, 255, 255, 0.9);
  border-radius: 4px;

  .button-group {
    display: flex;
    justify-content: center;
    gap: 0.75rem;
  }

  .control-button {
    min-width: 120px;
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    background-color: #007bff;
    color: white;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.9rem;
    font-weight: 500;
    letter-spacing: 0.5px;

    &:hover:not(:disabled) {
      background-color: #0056b3;
      transform: translateY(-1px);
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    &:active:not(:disabled) {
      transform: translateY(0);
      box-shadow: none;
    }

    &:disabled, &.disabled {
      background-color: #ccc;
      cursor: not-allowed;
      opacity: 0.7;
      transform: none;
      box-shadow: none;
    }
  }
}

.table {
  flex: 1;
  position: relative;
  margin: 0.25rem;
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 0;

  &::before {
    content: '';
    display: block;
    width: min(75vh, 75%);
    padding-bottom: min(55vh, 55%);
    background-color: #2d8659;
    border-radius: 100px;
    position: absolute;
    transform: translateX(-50%);
    left: 50%;
  }
}

.players-container {
  position: absolute;
  width: 100%;
  height: 100%;
  max-width: min(85vh, 85%);
  max-height: min(65vh, 65%);
}

.player {
    position: absolute;
    transform-origin: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
}

.player-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
}

.player-card {
  position: absolute;
  display: flex;
  flex-direction: column;
  align-items: center;
  transform-origin: center center;
  transition: transform 0.3s ease;
  width: 70px;

  .card-container {
    width: 50px;
    height: 75px;
    background: white;
    border-radius: 6px;
    padding: 0.4rem;
    margin-bottom: 0.25rem;
    text-align: center;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;

    &.has-card {
      background-color: #e3f2fd;
      border: 2px solid #2196f3;
    }

    .card {
      font-size: 1.1rem;
      font-weight: bold;
      width: 100%;
      height: 100%;
      display: flex;
      align-items: center;
      justify-content: center;

      &.revealed {
        color: #2196f3;
      }

      .card-content {
        display: flex;
        align-items: center;
        justify-content: center;

        span {
          display: flex;
          align-items: center;
          justify-content: center;
          width: 100%;
          height: 100%;
          font-size: 1.3rem;

          &.infinity {
            font-size: 1.8rem;
          }
          &.coffee {
            font-size: 1.3rem;
          }
        }
      }
    }
  }

  .player-name {
    font-size: 0.8rem;
    color: white;
    background-color: rgba(0,0,0,0.5);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    margin-top: 0.25rem;
    white-space: nowrap;
    text-align: center;
    max-width: 100%;
    overflow: hidden;
    text-overflow: ellipsis;

    &.current-player {
      color: #ffd700;
    }

    &.view-only {
      font-style: italic;
      opacity: 0.8;
    }
  }
}

.player-name {
    background: $name-bg;
    color: white;
    padding: 0.25rem 0.75rem;
    border-radius: 1rem;
    font-size: 0.875rem;
    white-space: nowrap;

    &.current-player {
        background: $current-player;
    }

    &.view-only {
        background: $empty-spot;
    }
}

.observer-content {
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
    opacity: 0.7;
}

.view-only-icon {
    font-size: 1.5em;
    color: $empty-spot;
}

.view-only {
    opacity: 0.7;
}

.view-only-slash {
    position: absolute;
    font-size: 2em;
    color: red;
    opacity: 0.7;
    transform: rotate(-45deg);
}

.action-button {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    background: white;
    border: none;
    border-radius: 8px;
    padding: 0.75rem 1.5rem;
    font-weight: 500;
    color: $table-bg;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    z-index: 10;
    white-space: nowrap;

    &:hover:not(.disabled) {
        background: #f5f5f5;
        transform: translate(-50%, -50%) translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
    }

    &:active:not(.disabled) {
        transform: translate(-50%, -50%);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    &.disabled {
        opacity: 0.5;
        cursor: not-allowed;
        background: #f5f5f5;
    }
}

app-stats-display {
    position: absolute;
    top: 1rem;
    z-index: 1;
}

// Position players in an oval
@for $i from 1 through 12 {
  .player-card:nth-child(#{$i}) {
    $angle: ($i - 1) * 30deg; // 360° / 12 players = 30° spacing
    $baseRadius: 140%;  
    
    // Adjust radius based on position to create oval shape
    $adjustedRadius: if($angle == 0deg or $angle == 180deg,
      $baseRadius * 1.1,  // Top and bottom
      if($angle == 90deg or $angle == 270deg,
        $baseRadius * 0.95,  // Sides
        $baseRadius        // Other positions
      )
    );
    
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%) rotate($angle) translateY(-$adjustedRadius) rotate(-$angle);
  }
}
